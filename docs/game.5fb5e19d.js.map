{"mappings":"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","sources":["src/game.ts","src/questionBox.ts","src/answerBox.ts","src/check.ts","src/bird.ts","src/enemy.ts","src/healthBar.ts","src/background.ts","src/hero.ts","src/gameEnd/gameOver.ts","src/gameEnd/victory.ts","src/leaveGame.ts","src/app2.ts"],"sourcesContent":["import * as PIXI from \"pixi.js\";\r\n\r\n//classes\r\nimport { questionBox } from \"./questionBox\";\r\nimport { Bird } from \"./bird\";\r\n\r\nimport { Assets } from \"./assets\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Background } from \"./background\";\r\nimport { Hero } from \"./hero\";\r\nimport { Texture } from \"pixi.js\";\r\nimport { GameOver } from \"./gameEnd/gameOver\";\r\nimport { Victory } from \"./gameEnd/victory\";\r\nimport { LeaveGame } from \"./leaveGame\";\r\n\r\nexport class Game {\r\n  pixi: PIXI.Application;\r\n  loader: PIXI.Loader;\r\n  enemy: Enemy;\r\n  hero: Hero;\r\n  bird: Bird;\r\n  questionExist: boolean = false;\r\n\r\n  screenWidth: number = 1280;\r\n  screenHeight: number = 700;\r\n\r\n  constructor() {\r\n    PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\r\n    this.pixi = new PIXI.Application({ width: this.screenWidth, height: this.screenHeight, backgroundColor: 0x2980b9 });\r\n    document.body.appendChild(this.pixi.view);\r\n    // this.loader = new PIXI.Loader();\r\n    let assets = new Assets(this);\r\n    this.loader = assets;\r\n\r\n    //haal de json op om de animated spritesheet te maken\r\n  }\r\n\r\n  loadCompleted() {\r\n    const background = new Background(this.loader.resources[\"background\"].texture!, this.screenWidth, this.screenHeight);\r\n    this.pixi.stage.addChild(background);\r\n\r\n    const exitGame = new LeaveGame(this.loader.resources[\"leaveGame\"].texture!)\r\n    this.pixi.stage.addChild(exitGame)\r\n\r\n    //in frames komen de images te staan die de enemy animate\r\n    let heroFrames: PIXI.Texture[][] = this.createHeroFrames();\r\n\r\n    let enemyFrames: PIXI.Texture[][] = this.createEnemyFrames();\r\n\r\n    let birdFrames = this.createBirdFrames();\r\n\r\n    this.spawnObjects(heroFrames, birdFrames);\r\n    this.spawnZombie(enemyFrames);\r\n    this.pixi.ticker.add((delta) => this.update(delta));\r\n  }\r\n\r\n  spawnZombie(enemyFrames: PIXI.Texture[][]) {\r\n    //creeër een nieuwe Enemy\r\n    this.enemy = new Enemy(this, this.hero, enemyFrames);\r\n  }\r\n\r\n  spawnObjects(heroFrames: PIXI.Texture[][], birdFrames: PIXI.Texture[]) {\r\n    this.hero = new Hero(this, heroFrames);\r\n\r\n    // nieuwe bird\r\n    this.bird = new Bird(this, birdFrames);\r\n\r\n    this.makeQbox();\r\n  }\r\n\r\n  createHeroFrames(): Texture[][] {\r\n    let heroAttackIdle: Texture[] = [];\r\n    let heroAttack:     Texture[] = [];\r\n    let heroTakeDamage: Texture[] = [];\r\n\r\n    for (let i = 0; i <= 3; i++) {\r\n      heroAttackIdle.push(PIXI.Texture.from(`HeavyBandit_CombatIdle_${i}.png`));\r\n    }\r\n\r\n    for (let i = 0; i <= 7; i++) {\r\n      heroAttack.push(PIXI.Texture.from(`HeavyBandit_Attack_${i}.png`));\r\n    }\r\n\r\n    for (let i = 0; i <= 1; i++) {\r\n      heroTakeDamage.push(PIXI.Texture.from(`HeavyBandit_Hurt_${i}.png`));\r\n    }\r\n\r\n    return [heroAttackIdle, heroAttack, heroTakeDamage];\r\n  }\r\n\r\n  createEnemyFrames(): Texture[][] {\r\n    let enemyIdle:        Texture[] = []\r\n    let enemyAttack:      Texture[] = []\r\n    let enemyTakeDamage:  Texture[] = []\r\n    let enemyWalk:        Texture[] = []\r\n    let enemyDie:         Texture[] = []\r\n\r\n    for (let i = 1; i <= 11; i++) {\r\n      enemyIdle.push(Texture.from(`skeletonIdle_${i}.png`))\r\n    }\r\n    for (let i = 1; i <= 18; i++) {\r\n      enemyAttack.push(Texture.from(`skeletonAttack_${i}.png`))\r\n    }\r\n    for (let i = 1; i <= 8; i++) {\r\n      enemyTakeDamage.push(Texture.from(`skeletonHit_${i}.png`))\r\n    }\r\n    for (let i = 1; i <= 13; i++) {\r\n      enemyWalk.push(Texture.from(`skeletonWalk_${i}.png`))\r\n    }\r\n    for (let i = 1; i <= 15; i++) {\r\n      enemyDie.push(Texture.from(`SkeletonDie_${i}.png`))\r\n    }\r\n    return [enemyIdle, enemyAttack, enemyTakeDamage, enemyWalk, enemyDie]\r\n  }\r\n\r\n  createBirdFrames() {\r\n    let frames: PIXI.Texture[] = [];\r\n\r\n    for (let i = 1; i <= 4; i++) {\r\n      const texture = PIXI.Texture.from(`birdSprite${i}.png`);\r\n      frames.push(texture);\r\n    }\r\n    return frames;\r\n  }\r\n\r\n  gameOver(win: boolean) {\r\n    if (!win) {\r\n      let gameOver = new GameOver(this.loader.resources[\"gameOver\"].texture!, this.screenWidth, this.screenHeight)\r\n      this.pixi.stage.addChild(gameOver)  \r\n    } else {\r\n      let victory = new Victory(this.loader.resources[\"victory\"].texture!, this.screenWidth, this.screenHeight)\r\n      this.pixi.stage.addChild(victory)  \r\n    }\r\n  }\r\n\r\n  makeQbox() {\r\n    let qBox = null;\r\n    console.log(qBox)\r\n    qBox = new questionBox(this, this.hero, this.enemy);\r\n  }\r\n\r\n  update(delta: number) {\r\n    if (this.enemy) {\r\n      this.enemy.update(delta);\r\n    }\r\n  }\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { Answer } from \"./answerBox\";\r\nimport { Game } from \"./game\";\r\nimport { Check } from \"./check\";\r\nimport { Cross } from \"./crossSprite\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Hero } from \"./hero\";\r\n\r\nexport class questionBox {\r\n  question: string;\r\n  questionId: number;\r\n\r\n  qText: PIXI.Text;\r\n\r\n  qBoxSprite: PIXI.Sprite;\r\n\r\n  answers: Answer[] = [];\r\n\r\n  game: Game;\r\n\r\n  enemy: Enemy;\r\n\r\n  hero: Hero;\r\n\r\n  constructor(game: Game, hero: Hero, enemy : Enemy) {\r\n    this.game = game;\r\n    this.hero = hero;\r\n    this.enemy = enemy;\r\n\r\n    //fetch questions from json file\r\n    fetch(\"question.json\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        let json = response.json();\r\n        return json;\r\n      })\r\n      .then((json) => {\r\n        this.generateQuestion(json, game);\r\n      })\r\n      .catch(this.errorHandler);\r\n  }\r\n\r\n  generateQuestion(data: any, game: Game) {\r\n    //get random question\r\n    this.questionId = this.getRandomInt(1, 4);\r\n    this.question = data[this.questionId].question;\r\n\r\n    //question box sprite\r\n    this.qBoxSprite = new PIXI.Sprite(game.loader.resources[\"qBoxSprite\"].texture!);\r\n    // this.qBoxSprite.scale.set(3, 2);\r\n    // this.qBoxSprite.anchor.set(0.5)\r\n    this.qBoxSprite.width = 750\r\n    this.qBoxSprite.height = 200\r\n    this.qBoxSprite.x = 265;\r\n    this.qBoxSprite.y = 520;\r\n    this.game.pixi.stage.addChild(this.qBoxSprite);\r\n\r\n    //question text\r\n    const style = new PIXI.TextStyle({\r\n      fontFamily: \"ArcadeFont\",\r\n      fontSize: 25,\r\n      fill: 0x000000,\r\n      align: \"center\",\r\n    });\r\n\r\n    this.qText = new PIXI.Text(this.question, style);\r\n    this.qText.resolution = 10;\r\n    this.qText.anchor.set(0.5)\r\n    this.qText.x = this.qBoxSprite.x + 375;\r\n    this.qText.y = this.qBoxSprite.y + 50;\r\n    this.game.pixi.stage.addChild(this.qText);\r\n\r\n    //generate answers\r\n    for (let i: number = 0; i < 3; i++) {\r\n      let answer = new Answer(game, this, i);\r\n      this.answers.push(answer);\r\n    }\r\n  }\r\n\r\n  async answerHandler(event: Event, answer: string, correctAnswer: string) {\r\n    if (answer === correctAnswer) {\r\n      //TODO: correct answer behaviour (generate new question, give hitpoints to enemy)\r\n      console.log(\"correct answer\");\r\n\r\n      //show that the answer is correct\r\n      let check = new Check(this.game, this);\r\n\r\n      //lock the answers so you cant answer correct multiple times\r\n      this.answers.forEach((a: Answer, index: number) => {\r\n        //change to black and white texture\r\n        a.aBoxSprite.texture = this.game.loader.resources[\"aBoxSpriteDeactivated\"].texture!;\r\n\r\n        a.aBoxSprite.interactive = false;\r\n        a.aBoxSprite.buttonMode = false;\r\n      });\r\n\r\n      this.hero.attack();\r\n\r\n      //wait 5 seconds\r\n      await this.sleep(1500);\r\n      this.qText.destroy();\r\n      this.qBoxSprite.destroy();\r\n\r\n      //generate a new question\r\n      if (this.hero.health > 0 && this.game.enemy.health > 0) {\r\n        this.game.makeQbox();\r\n      }\r\n    } else {\r\n      //TODO: wrong answer behaviour (generate new question, give hitpoints to player)\r\n      console.log(\"wrong answer\");\r\n\r\n      //show that the answer is wrong\r\n      // let cross = new Cross(this.game, this);\r\n\r\n      //make the enemy attack the hero and the hero lose health\r\n\r\n      //lock the answers so you cant answer correct multiple times\r\n      this.answers.forEach((a: Answer, index: number) => {\r\n        //change to black and white texture\r\n        a.aBoxSprite.texture = this.game.loader.resources[\"aBoxSpriteDeactivated\"].texture!;\r\n\r\n        a.aBoxSprite.interactive = false;\r\n        a.aBoxSprite.buttonMode = false;\r\n      });\r\n\r\n      this.game.enemy.attack();\r\n      this.hero.takeDamage();\r\n\r\n      //wait 1.5 seconds\r\n      await this.sleep(1500);\r\n      this.qText.destroy();\r\n      this.qBoxSprite.destroy();\r\n\r\n      //generate a new question\r\n      if (this.hero.health > 0 && this.game.enemy.health > 0) {\r\n        this.game.makeQbox();\r\n      }\r\n    }\r\n  }\r\n\r\n  sleep(ms: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  errorHandler(event: any) {\r\n    console.log(event);\r\n  }\r\n\r\n  getRandomInt(min: number, max: number): number {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { Game } from \"./game\";\r\nimport { questionBox } from \"./questionBox\";\r\n\r\nexport class Answer {\r\n  game: Game;\r\n  questionBox: questionBox;\r\n\r\n  aBoxSprite: PIXI.Sprite;\r\n  aText: PIXI.Text;\r\n\r\n  answer: string;\r\n  correctAnswer: string;\r\n\r\n  constructor(game: Game, qBox: questionBox, i: number) {\r\n    this.game = game;\r\n    this.questionBox = qBox;\r\n\r\n    //fetch questions from json file\r\n    fetch(\"question.json\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        let json = response.json();\r\n        return json;\r\n      })\r\n      .then((json) => {\r\n        this.generateAnswers(json, game, qBox, i);\r\n      })\r\n      .catch(this.errorHandler);\r\n  }\r\n\r\n  generateAnswers(data: any, game: Game, qBox: questionBox, i: number) {\r\n    //correct answer\r\n    this.correctAnswer = data[qBox.questionId].correctA;\r\n\r\n    //answer\r\n    this.answer = data[qBox.questionId].answers[i];\r\n\r\n    //show answer box sprite\r\n    this.aBoxSprite = new PIXI.Sprite(game.loader.resources[\"aBoxSprite\"].texture!);\r\n    this.aBoxSprite.anchor.set(0.5);\r\n    this.aBoxSprite.x = qBox.qBoxSprite.x + 180 * i + 208;\r\n    this.aBoxSprite.y = qBox.qBoxSprite.y + 145;\r\n\r\n    //give them text\r\n    this.aText = new PIXI.Text(this.answer, { fontFamily: \"Arial\", fontSize: 24, fill: 0x000000, align: \"center\" });\r\n    this.aText.anchor.set(0.5);\r\n    this.aText.x = this.aBoxSprite.x;\r\n    this.aText.y = this.aBoxSprite.y;\r\n\r\n    //make the answer sprite interactive\r\n    this.aBoxSprite.interactive = true;\r\n    this.aBoxSprite.buttonMode = true;\r\n    this.aBoxSprite.on(\"pointerdown\", (event: Event) => this.onButtonDown(event, qBox, this.answer, this.correctAnswer));\r\n\r\n    //append answer box sprite and text\r\n    this.game.pixi.stage.addChild(this.aBoxSprite, this.aText);\r\n  }\r\n\r\n  onButtonDown(event: Event, qBox: questionBox, answer: string, correctAnswer: string) {\r\n    qBox.answerHandler(event, answer, correctAnswer);\r\n  }\r\n\r\n  errorHandler(event: any) {\r\n    console.log(event);\r\n  }\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { Game } from \"./game\";\r\nimport { questionBox } from \"./questionBox\";\r\n\r\nexport class Check {\r\n  game: Game;\r\n  checkSprite: PIXI.Sprite;\r\n  questionBox: questionBox;\r\n\r\n  constructor(game: Game, qBox: questionBox) {\r\n    this.game = game;\r\n    this.checkSprite = new PIXI.Sprite(game.loader.resources[\"checkSprite\"].texture!);\r\n    this.checkSprite.x = qBox.qBoxSprite.x + 300;\r\n    this.checkSprite.y = qBox.qBoxSprite.y + 20;\r\n    this.game.pixi.stage.addChild(this.checkSprite);\r\n  }\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { Game } from \"./game\";\r\nimport { Hero } from \"./hero\";\r\n\r\nexport class Bird extends PIXI.AnimatedSprite {\r\n  game: Game;\r\n\r\n  constructor(game: Game, textures: PIXI.Texture[]) {\r\n    super(textures);\r\n\r\n    this.game = game;\r\n    this.x = -50;\r\n    this.y = 50;\r\n\r\n    // this.birdSprite = new PIXI.Sprite(game.loader.resources[\"birdSprite1\"].texture)\r\n    // this.birdSprite.scale.set(0.5, 0.5)\r\n    // this.birdSprite.y = 480\r\n    // this.game.pixi.stage.addChild(this.birdSprite)\r\n    this.animationSpeed = 0.1;\r\n    // this.loop = true\r\n    // this.gotoAndPlay(4)\r\n    this.game.pixi.stage.addChild(this);\r\n\r\n    this.play();\r\n  }\r\n\r\n  //gets called every frame\r\n  update(delta: number) {\r\n    super.update(delta);\r\n    this.move(delta);\r\n  }\r\n\r\n  //moves gameobject\r\n  move(delta: number) {\r\n    this.x += 1 * delta;\r\n    this.y += Math.sin(this.x * 0.03)\r\n    if(this.x >= 1300) {\r\n      this.x = -50\r\n    }\r\n  }\r\n\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { Texture } from \"pixi.js\";\r\nimport { Game } from \"./game\";\r\nimport { Hero } from \"./hero\";\r\nimport { HealthBar } from \"./healthBar\";\r\n\r\nexport class Enemy extends PIXI.AnimatedSprite {\r\n  private game: Game;\r\n  private frames: PIXI.Texture[][] = [];\r\n\r\n  hero: Hero;\r\n  health: number = 100;\r\n  healthBar: HealthBar;\r\n  speed: number;\r\n\r\n  constructor(game: Game, hero: Hero, textures: Texture[][]) {\r\n    super(textures[3]);\r\n\r\n    //speed is random (range: 0.2 - 1.0)\r\n    this.speed =  1 //0.2 + Math.random() * 0.8;\r\n\r\n    this.frames = textures\r\n    this.game = game;\r\n    this.hero = hero;\r\n\r\n    this.anchor.set(0.5);\r\n    this.scale.set(9, 9)\r\n    this.x = -100;\r\n    this.y = 350 - Math.random() * 50;\r\n    this.loop = true;\r\n    this.animationSpeed = 0.1;\r\n    this.play();\r\n\r\n    //append enemy to game screen\r\n    this.game.pixi.stage.addChild(this);\r\n    //healthbar\r\n    this.healthBar = new HealthBar(game);\r\n    this.healthBar.healthBarSprite.y = this.y - 200;\r\n  }\r\n\r\n  attack() {\r\n    this.textures = this.frames[1]\r\n    this.loop = false\r\n    this.animationSpeed = 0.15\r\n    this.play()\r\n    this.onComplete = this.playIdle\r\n  }\r\n\r\n  //gets called every frame\r\n  update(delta: number) {\r\n    if (this) {\r\n      super.update(delta);\r\n      this.move(delta);\r\n      this.upadateHealthBarPosition();\r\n    }\r\n  }\r\n\r\n  upadateHealthBarPosition() {\r\n    this.healthBar.healthBarSprite.x = this.x - 100;\r\n  }\r\n\r\n  getHit(damage: number) {\r\n    this.health -= damage;\r\n    this.healthBar.healthBarSprite.scale.set(this.health * 0.02, 7);\r\n    this.healthBar.updateColor(this.health);\r\n\r\n    this.textures = this.frames[2]\r\n    this.loop = false\r\n    this.play()\r\n    this.onComplete = function () {\r\n      if(this.onCollision(this.hero)){\r\n        this.playIdle()\r\n      } else {\r\n        this.textures = this.frames[3]\r\n        this.loop = true\r\n        this.play()\r\n      }\r\n    }\r\n\r\n    if (this.health <= 0) {\r\n      this.die();\r\n    }\r\n  }\r\n\r\n  die() {\r\n    console.log(\"zombie is dead\");\r\n    this.textures = this.frames[4]\r\n    this.loop = false\r\n    this.play()\r\n    this.onComplete = function() {\r\n      this.game.gameOver(true);\r\n      this.destroy\r\n    }\r\n\r\n    //spawn a new enemy when the old one dies\r\n    //this.game.spawnZombie(this.game.createEnemyFrames());\r\n    //destroy the old enemy\r\n    // this.onComplete = this.destroy\r\n    this.hero.idleAnimation();\r\n  }\r\n\r\n  //moves gameobject\r\n  move(delta: number) {\r\n    if (!this.onCollision(this.hero)) {\r\n      this.x += this.speed * delta;\r\n    } else {\r\n      this.playIdle()\r\n    }\r\n  }\r\n\r\n  playIdle() {\r\n    if(this.playing != true) {\r\n      this.textures = this.frames[0]\r\n      this.animationSpeed = 0.1\r\n      this.loop = true\r\n      this.play()\r\n    }\r\n  }\r\n\r\n  onCollision(collider: any): boolean {\r\n    let colliderBounds = this.getBounds();\r\n    let otherCollider = collider.getBounds();\r\n    return colliderBounds.x + colliderBounds.width > otherCollider.x && colliderBounds.x < otherCollider.x + otherCollider.width && colliderBounds.y + colliderBounds.height > otherCollider.y && colliderBounds.y < otherCollider.y + otherCollider.height;\r\n  }\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { Game } from \"./game\";\r\n\r\nexport class HealthBar extends PIXI.Sprite {\r\n  lenght: number;\r\n  healthBarSprite: PIXI.Sprite;\r\n  colorMatrix = new PIXI.filters.ColorMatrixFilter();\r\n\r\n  constructor(game: Game) {\r\n    super();\r\n    this.healthBarSprite = new PIXI.Sprite(game.loader.resources[\"healthBarSprite\"].texture!);\r\n    this.healthBarSprite.scale.set(2, 7);\r\n    game.pixi.stage.addChild(this.healthBarSprite);\r\n    this.healthBarSprite.filters = [this.colorMatrix];\r\n    this.colorMatrix.hue(100, true);\r\n  }\r\n\r\n  updateColor(health: number) {\r\n    this.healthBarSprite.filters = [this.colorMatrix];\r\n    this.colorMatrix.hue(health, false);\r\n  }\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\n\r\nexport class Background extends PIXI.Sprite {\r\n  constructor(texture: PIXI.Texture, x: number, y: number) {\r\n    super(texture);\r\n    this.width = x;\r\n    this.height = y;\r\n  }\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\nimport { Texture } from \"pixi.js\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Game } from \"./game\";\r\nimport { GameOver } from \"./gameEnd/gameOver\";\r\nimport { HealthBar } from \"./healthBar\";\r\n\r\nexport class Hero extends PIXI.AnimatedSprite {\r\n  private game: Game;\r\n  private frames: PIXI.Texture[][] = [];\r\n\r\n  hitPoints = 20;\r\n  health = 100;\r\n  healthBar: HealthBar;\r\n\r\n  //give the attributes of the hero\r\n  constructor(game: Game, textures: Texture[][]) {\r\n    super(textures[0]);\r\n\r\n    this.game = game;\r\n    this.frames = textures;\r\n\r\n    this.anchor.set(0.5);\r\n    this.scale.set(8, 8);\r\n    this.x = 1000;\r\n    this.y = 300;\r\n    this.animationSpeed = 0.1;\r\n    this.loop = true;\r\n    this.play();\r\n\r\n    this.interactive = true;\r\n    //add the hero character to the canvas\r\n    this.game.pixi.stage.addChild(this);\r\n    //healthbar\r\n    this.healthBar = new HealthBar(game);\r\n    this.healthBar.healthBarSprite.y = this.y - 150;\r\n    this.healthBar.healthBarSprite.x = this.x - 100;\r\n    this.idleAnimation();\r\n  }\r\n\r\n  attack() {\r\n    this.textures = this.frames[1];\r\n    this.loop = false;\r\n    this.play();\r\n    this.onFrameChange = function (currentFrame: Number) {\r\n      if (currentFrame == 5) {\r\n        this.game.enemy.getHit(this.hitPoints);\r\n      }\r\n    };\r\n    this.onComplete = this.idleAnimation;\r\n  }\r\n\r\n  takeDamage() {\r\n    this.health -= 25;\r\n    this.healthBar.healthBarSprite.scale.set(this.health * 0.02, 7);\r\n    this.healthBar.updateColor(this.health);\r\n    if (this.health <= 0) {\r\n      this.die();\r\n    }\r\n    this.textures = this.frames[2];\r\n    this.animationSpeed = 0.05;\r\n    this.loop = false;\r\n    this.play();\r\n    this.onComplete = this.idleAnimation;\r\n  }\r\n\r\n  die() {\r\n    console.log(\"hero died\");\r\n    this.game.gameOver(false)\r\n  }\r\n\r\n  idleAnimation() {\r\n    this.textures = this.frames[0];\r\n    this.animationSpeed = 0.1;\r\n    this.loop = true;\r\n    this.play();\r\n  }\r\n}\r\n","import * as PIXI from \"pixi.js\"\r\nimport { Texture } from \"pixi.js\"\r\n\r\nexport class GameOver extends PIXI.Sprite{\r\n    constructor(gameOverTexture : Texture, x: number, y: number) {\r\n        super(gameOverTexture)\r\n\r\n        this.anchor.set(0.5)\r\n        this.width = x\r\n        this.height = y\r\n        this.x = x/2\r\n        this.y = y/2\r\n        setTimeout(this.backToMap, 3000)\r\n    }\r\n\r\n    backToMap() {\r\n        window.location.href = \"index.html\"\r\n    }\r\n}","import * as PIXI from \"pixi.js\"\r\nimport { Texture } from \"pixi.js\"\r\n\r\nexport class Victory extends PIXI.Sprite{\r\n    constructor(victoryTexture : Texture, x: number, y: number) {\r\n        super(victoryTexture)\r\n\r\n        this.anchor.set(0.5)\r\n        this.width = x\r\n        this.height = y\r\n        this.x = x/2\r\n        this.y = y/2\r\n        setTimeout(this.backToMap, 3000)\r\n    }\r\n\r\n    backToMap() {\r\n        window.location.href = \"index.html\"\r\n    }\r\n}","import * as PIXI from \"pixi.js\"\r\n\r\nexport class LeaveGame extends PIXI.Sprite {\r\n    constructor(texture: PIXI.Texture) {\r\n        super(texture)\r\n\r\n        this.anchor.set(0.5)\r\n        this.x = 30\r\n        this.y = 50\r\n        this.interactive = true\r\n        this.buttonMode = true\r\n        this.on(\"pointerdown\", this.buttonClicked)\r\n    }\r\n\r\n    buttonClicked() {\r\n        window.location.href = \"index.html\"\r\n    }\r\n}","import { Game } from \"./game\"\r\nimport { Map } from './worldMap'\r\n// import { testGame } from \"./testGame\";\r\n\r\nnew Game();\r\n"],"names":["$31xg4","parcelRequire","$bf5d6ec79d2ad6d1$export$cef5d51d354050a6","constructor","game","qBox","i","this","questionBox","fetch","then","response","ok","Error","statusText","json","generateAnswers","catch","errorHandler","data","correctAnswer","questionId","correctA","answer","answers","aBoxSprite","Sprite","loader","resources","texture","anchor","set","x","qBoxSprite","y","aText","Text","fontFamily","fontSize","fill","align","interactive","buttonMode","on","event","onButtonDown","pixi","stage","addChild","answerHandler","console","log","$5f9233fbf25e8005$export$60bffc6e2a50e7f9","checkSprite","$f3f41c28af80fedd$export$88521cfb872fc59f","hero","enemy","generateQuestion","getRandomInt","question","width","height","style","TextStyle","qText","resolution","push","async","forEach","a","index","attack","sleep","destroy","health","makeQbox","takeDamage","ms","Promise","resolve","setTimeout","min","max","Math","ceil","floor","random","$357911412e67b592$export$9fbb62047327c811","AnimatedSprite","textures","super","animationSpeed","play","update","delta","move","sin","$5af4992e008c6893$export$cae36af140f040c","colorMatrix","filters","ColorMatrixFilter","healthBarSprite","scale","hue","updateColor","$1536b058750c3eeb$export$eefe978c73a9a6","frames","speed","loop","healthBar","onComplete","playIdle","upadateHealthBarPosition","getHit","damage","onCollision","die","gameOver","idleAnimation","playing","collider","colliderBounds","getBounds","otherCollider","$cfbd098926923cad$export$668799e4797757a8","$4f4118cacf8c1968$export$887967f05dc521ae","hitPoints","onFrameChange","currentFrame","$07f698f202cf71d8$export$5b8da01f83922c02","gameOverTexture","backToMap","window","location","href","$736bf003a21a788d$export$a90cc1a54a91e9ee","victoryTexture","$8ea68316b4032f40$export$ef9664485f3e098a","buttonClicked","questionExist","screenWidth","screenHeight","settings","SCALE_MODE","SCALE_MODES","NEAREST","Application","backgroundColor","document","body","appendChild","view","assets","$clpju","Assets","loadCompleted","background","exitGame","heroFrames","createHeroFrames","enemyFrames","createEnemyFrames","birdFrames","createBirdFrames","spawnObjects","spawnZombie","ticker","add","bird","heroAttackIdle","heroAttack","heroTakeDamage","Texture","from","i1","i2","enemyIdle","enemyAttack","enemyTakeDamage","enemyWalk","enemyDie","i3","i4","i5","i6","win","victory"],"version":3,"file":"game.5fb5e19d.js.map"}